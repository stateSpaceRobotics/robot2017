<launch>
  <include file="$(find simulation_2017)/launch/empty_field.launch" />
  <node name="tf_footprint_base" pkg="tf" type="static_transform_publisher" args="0 0 0 0 0 0 base_link base_footprint 40" />

  <arg name="model" default="$(find simulation_2017)/urdf/traditionalApproach2016.urdf"/>
  <param name="robot_description" command="$(find xacro)/xacro.py $(arg model)" />

  <node name="rviz" pkg="rviz" type="rviz" args="-d $(find simulation_2017)rviz//urdf.rviz" />

  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model"
    args="-z 0.5 -x 0 -y 1 -Y 1.570795 -urdf -model traditional_2016 -param robot_description" respawn="false" output="screen" />

  <!-- This param file is where any environment-agnostic (live or simulation)
  configuration should be loaded, including controllers -->
  <rosparam command="load" file="$(find simulation_2017)/config/control_2016.yaml" />

  <arg name="gui" default="True" />
  <param name="use_gui" value="True" />

  <!-- This node loads the two controllers into a controller manager (real or simulated). The
  controllers are defined in config/control.yaml -->
  <node name="t16_controller_spawner" pkg="controller_manager" type="spawner"
    args="t16_joint_state_controller
          t16_diff_drive_controller
          t16_plate_controller
          t16_arm_controller
          --shutdown-timeout 3">
  </node>

  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />

  <node name="rqt_robot_steering" pkg="rqt_robot_steering" type="rqt_robot_steering">
    <param name="default_topic" value="/t16_diff_drive_controller/cmd_vel"/>
  </node>
</launch>
